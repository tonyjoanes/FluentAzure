name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]  # Trigger on version tags for release
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_ADD_GLOBAL_TOOLS_TO_PATH: false
  DOTNET_MULTILEVEL_LOOKUP: 0

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    # Checkout code with full history for MinVer to work properly
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for MinVer to determine version from Git tags

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache NuGet packages for faster builds
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build solution with version information
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      env:
        # Set CI environment for deterministic builds
        CI: true

    # Run tests with coverage collection
    - name: Run tests with coverage
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    # Upload coverage reports to Codecov (Ubuntu only to avoid duplicates)
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        directory: ./coverage
        fail_ci_if_error: true
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Run security audit to check for vulnerable packages
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive 2>&1 | tee security-audit.log

    # Check for vulnerabilities and fail if found
    - name: Check for vulnerabilities
      run: |
        if grep -q "has the following vulnerable packages" security-audit.log; then
          echo "âŒ Vulnerable packages found!"
          cat security-audit.log
          exit 1
        else
          echo "âœ… No vulnerable packages found"
        fi

    # Upload security audit results as artifact
    - name: Upload security audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: security-audit.log

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build solution
    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    # Check code formatting consistency
    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity normal

    # Run static code analysis
    - name: Run static code analysis
      run: dotnet build --configuration Release --verbosity normal /p:RunAnalyzersDuringBuild=true /p:TreatWarningsAsErrors=true /p:WarningsAsErrors="" /p:WarningsNotAsErrors="CS1591"

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
    # Checkout code with full history for MinVer
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history needed for MinVer versioning

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build solution with version information
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      env:
        CI: true

    # Create NuGet package with automatic versioning
    - name: Create NuGet package
      run: dotnet pack --no-build --configuration Release --output ./packages

    # Display version information for debugging
    - name: Display version information
      run: |
        echo "Git tag: ${{ github.ref }}"
        echo "Package files created:"
        ls -la ./packages/*.nupkg || echo "No packages found"

    # Upload package artifacts for manual inspection
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

  publish:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [package]
    if: startsWith(github.ref, 'refs/tags/v')  # Only publish on version tags

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Cache NuGet packages
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Build solution
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      env:
        CI: true

    # Create NuGet package
    - name: Create NuGet package
      run: dotnet pack --no-build --configuration Release --output ./packages

    # Display version information
    - name: Display version information
      run: |
        echo "Publishing version from tag: ${{ github.ref }}"
        echo "Package files:"
        ls -la ./packages/*.nupkg

    # Publish to NuGet.org
    - name: Publish to NuGet.org
      run: |
        # Publish each package found
        for package in ./packages/*.nupkg; do
          echo "Publishing $package to NuGet.org..."
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate
        done
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    # Create GitHub release (optional)
    - name: Create GitHub Release
      uses: actions/create-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## What's Changed

          This release includes the latest updates and improvements.

          ### Version
          ${{ github.ref }}

          ### Downloads
          NuGet packages are available on [NuGet.org](https://www.nuget.org/packages/FluentAzure)
        draft: false
        prerelease: false
